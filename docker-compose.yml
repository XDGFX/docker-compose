version: "3.7"
services:

## --- ONLY NON VITAL / TESTING SERVICES HERE ---
## --- VITAL SERVICES GO IN vital-docker-compose.yml ---

# --- NETWORK SERVICES --- #
  # heimdall:
  #   image: linuxserver/heimdall
  #   container_name: heimdall
  #   restart: unless-stopped

  #   volumes:
  #     - ${DOCKER_STORAGE}/heimdall/config:/config

  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}

  #   networks:
  #     - traefik_proxy

  #   labels:
  #     # TRAEFIK ENABLE
  #     - "traefik.enable=true"
  #     - "traefik.frontend.rule=Host:${DOMAINNAME}"
  #     - "traefik.port=443"
  #     - "traefik.protocol=https"  # Needed otherwise 400 error

  #     # AUTH BLOCK
  #     - "traefik.frontend.auth.forward.address=http://traefik-forward-auth:4181"
  #     - "traefik.frontend.auth.forward.authResponseHeaders=X-Forwarded-User"
  #     - "traefik.frontend.auth.forward.trustForwardHeader=true"

  #     # GENERAL SECURITY
  #     - "traefik.frontend.headers.SSLRedirect=true"
  #     - "traefik.frontend.headers.STSSeconds=315360000"
  #     - "traefik.frontend.headers.browserXSSFilter=true"
  #     - "traefik.frontend.headers.contentTypeNosniff=true"
  #     - "traefik.frontend.headers.forceSTSHeader=true"
  #     - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
  #     - "traefik.frontend.headers.STSIncludeSubdomains=true"
  #     - "traefik.frontend.headers.STSPreload=true"
  #     - "traefik.frontend.headers.frameDeny=true"


  vpn:
    image: azinchen/nordvpn
    container_name: vpn
    restart: unless-stopped
    # network_mode: bridge

    cap_add:
      - net_admin

    devices:
      - /dev/net/tun

    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - USER=${VPN_USER}
      - PASS=${VPN_PASS}
      - COUNTRY=Netherlands
      - CATEGORY=P2P
      - TECHNOLOGY=NordLynx
      - NETWORK=192.168.1.0/24

    ports:
      - 8112:8112
      - 9117:9117

    networks:
      - traefik_proxy


  apache: # {DOMAINNAME} frontend
    image: httpd:alpine
    container_name: apache-startpage
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/apache-startpage/data:/usr/local/apache2/htdocs/

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"

      ## HTTP Routers
      - "traefik.http.routers.apache.entryPoints=https"
      - "traefik.http.routers.apache.rule=Host(`${DOMAINNAME}`)"
      - "traefik.http.routers.apache.tls=true"

      ## HTTP Services
      - "traefik.http.routers.apache.service=apache"
      - "traefik.http.services.apache.loadbalancer.server.port=80"

      ## Middlewares
      - "traefik.http.routers.apache.middlewares=chain-no-auth@file"


# --- DOCKER SERVICES --- #
  portainer:
    image: portainer/portainer
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_STORAGE}/portainer/data:/data

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.portainer.entryPoints=https"
      - "traefik.http.routers.portainer.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    
      ## Middlewares
      - "traefik.http.routers.portainer.middlewares=chain-auth@file"


  ouroboros:
    container_name: ouroboros
    restart: unless-stopped
    image: pyouroboros/ouroboros

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - CLEANUP=true
      - INTERVAL=300
      - LOG_LEVEL=info
      - SELF_UPDATE=true



# --- MEDIA SERVER --- #
  plex:
    container_name: plex
    image: linuxserver/plex
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/plex/config:/config
      - ${MEDIA_DIR}:/mnt/media
      - /opt/PPP:/mnt/PPP

    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=latest

    networks:
      - traefik_proxy

    devices:
      - "/dev/dvb:/dev/dvb"

    ports:
      - "32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.plex.entryPoints=https"
      - "traefik.http.routers.plex.rule=Host(`plex.$DOMAINNAME`)"
      - "traefik.http.routers.plex.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.plex.service=plex"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    
      ## Middlewares
      - "traefik.http.routers.plex.middlewares=chain-no-auth@file"


  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/tautulli/config:/config

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.tautulli.entryPoints=https"
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.tautulli.service=tautulli"
      - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
    
      ## Middlewares
      - "traefik.http.routers.tautulli.middlewares=chain-auth@file"


  deluge:
    image: linuxserver/deluge
    container_name: deluge
    restart: unless-stopped
    network_mode: service:vpn

    depends_on:
      - vpn

    volumes:
      - ${DOCKER_STORAGE}/deluge/config:/config
      - ${DOCKER_STORAGE}/deluge/watch:/watch
      - ${DELUGE_TORRENTS_DIR}:/torrents
      - ${DELUGE_DOWNLOADS_DIR}:/downloads

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    # networks:
    #   - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.deluge.entryPoints=https"
      - "traefik.http.routers.deluge.rule=Host(`deluge.$DOMAINNAME`)"
      - "traefik.http.routers.deluge.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.deluge.service=deluge"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
    
      ## Middlewares
      - "traefik.http.routers.deluge.middlewares=chain-auth@file"


  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/sonarr/config:/config
      - ${TV_DIR}:/tv
      - ${DELUGE_DOWNLOADS_DIR}:/downloads

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.sonarr.entryPoints=https"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    
      ## Middlewares
      - "traefik.http.routers.sonarr.middlewares=chain-auth@file"


  radarr:
    image: linuxserver/radarr
    container_name: radarr
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/radarr/config:/config
      - ${FILMS_DIR}:/movies
      - ${DELUGE_DOWNLOADS_DIR}:/downloads

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.radarr.entryPoints=https"
      - "traefik.http.routers.radarr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    
      ## Middlewares
      - "traefik.http.routers.radarr.middlewares=chain-auth@file"


  jackett:
    image: linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    network_mode: service:vpn

    depends_on:
      - vpn

    volumes:
      - ${DOCKER_STORAGE}/jackett/config:/config

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    # networks:
    #   - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.jackett.entryPoints=https"
      - "traefik.http.routers.jackett.rule=Host(`jackett.$DOMAINNAME`)"
      - "traefik.http.routers.jackett.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.jackett.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
    
      ## Middlewares
      - "traefik.http.routers.jackett.middlewares=chain-auth@file"



# --- OTHER TOOLS --- #
  crashplan:
    image: jlesage/crashplan-pro
    container_name: crashplan
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/crashplan/config:/config
      - ${FILES_DIR}:/storage:ro

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.crashplan.entryPoints=https"
      - "traefik.http.routers.crashplan.rule=Host(`crashplan.$DOMAINNAME`)"
      - "traefik.http.routers.crashplan.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.crashplan.service=crashplan"
      - "traefik.http.services.crashplan.loadbalancer.server.port=5800"
    
      ## Middlewares
      - "traefik.http.routers.crashplan.middlewares=chain-auth@file"


  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    restart: unless-stopped

    volumes:
      - "${DOCKER_STORAGE}/duplicati/config:/config"
      - "/:/mnt:ro"
      - "${BACKUPS_DIR}:/backups"

    environment:
      - PUID=0
      - PGID=0

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.duplicati.entryPoints=https"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.$DOMAINNAME`)"
      - "traefik.http.routers.duplicati.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.duplicati.service=duplicati"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"
    
      ## Middlewares
      - "traefik.http.routers.duplicati.middlewares=chain-auth@file"


  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped

    networks:
      - traefik_proxy

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.adminer.entryPoints=https"
      - "traefik.http.routers.adminer.rule=Host(`adminer.$DOMAINNAME`)"
      - "traefik.http.routers.adminer.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.adminer.service=adminer"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    
      ## Middlewares
      - "traefik.http.routers.adminer.middlewares=chain-auth@file"


  # unifi-controller:
  #   restart: unless-stopped
  #   image: linuxserver/unifi-controller
  #   container_name: unifi-controller

  #   volumes:
  #     - ${DOCKER_STORAGE}/unifi-controller/config:/config

  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}

  #   ports:
  #     - 3478:3478/udp
  #     - 10001:10001/udp
  #     - 8080:8080
  #     - 8081:8081
  #     - 8443:8443
  #     - 8843:8843
  #     - 8880:8880
  #     - 6789:6789


  netdata:
    image: netdata/netdata
    container_name: netdata
    restart: unless-stopped

    cap_add:
      - SYS_PTRACE

    security_opt:
      - apparmor:unconfined

    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_STORAGE}/netdata/data/config:/etc/netdata

    environment:
      - PUID=${PUID}
      - PGID=999  #${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.netdata.entryPoints=https"
      - "traefik.http.routers.netdata.rule=Host(`netdata.$DOMAINNAME`)"
      - "traefik.http.routers.netdata.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.netdata.service=netdata"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
    
      ## Middlewares
      - "traefik.http.routers.netdata.middlewares=chain-auth@file"


  nextcloud:
    image: linuxserver/nextcloud
    container_name: nextcloud
    restart: unless-stopped

    ports:
      - 1234:443

    volumes:
      - ${DOCKER_STORAGE}/nextcloud/config:/config
      - ${NEXTCLOUD_DIR}:/data

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.nextcloud.entryPoints=https"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.$DOMAINNAME`)"
      - "traefik.http.routers.nextcloud.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.nextcloud.service=nextcloud"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=443"
      - "traefik.http.services.nextcloud.loadbalancer.server.scheme=https"
    
      ## Middlewares
      - "traefik.http.routers.nextcloud.middlewares=chain-no-auth@file"
      
    # labels:
    #   # TRAEFIK ENABLE
    #   - "traefik.enable=true"
    #   - "traefik.frontend.rule=Host:nextcloud.${DOMAINNAME}"
    #   - "traefik.port=443"
      # - "traefik.protocol=https"  # Needed otherwise 400 error

    #   # AUTH BLOCK
    #   # - "traefik.frontend.auth.forward.address=http://traefik-forward-auth:4181"
    #   # - "traefik.frontend.auth.forward.authResponseHeaders=X-Forwarded-User"
    #   # - "traefik.frontend.auth.forward.trustForwardHeader=true"

    #   # GENERAL SECURITY
    #   - "traefik.frontend.headers.SSLRedirect=true"
    #   - "traefik.frontend.headers.STSSeconds=315360000"
    #   - "traefik.frontend.headers.browserXSSFilter=true"
    #   - "traefik.frontend.headers.contentTypeNosniff=true"
    #   - "traefik.frontend.headers.forceSTSHeader=true"
    #   - "traefik.frontend.headers.SSLHost=${DOMAINNAME}"
    #   - "traefik.frontend.headers.STSIncludeSubdomains=true"
    #   - "traefik.frontend.headers.STSPreload=true"
    #   - "traefik.frontend.headers.frameDeny=true"


  transfer.sh:
    image: dutchcoders/transfer.sh
    container_name: transfer.sh
    restart: unless-stopped
    command: --provider local --basedir /tmp/ --http-auth-user ${TRANSFER_USER} --http-auth-pass ${TRANSFER_PASSWORD}

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.transfer.entryPoints=https"
      - "traefik.http.routers.transfer.rule=Host(`transfer.$DOMAINNAME`)"
      - "traefik.http.routers.transfer.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.transfer.service=transfer"
      - "traefik.http.services.transfer.loadbalancer.server.port=8080"
    
      ## Middlewares
      - "traefik.http.routers.transfer.middlewares=chain-no-auth@file"


  resilio-sync:
    image: linuxserver/resilio-sync
    container_name: resilio-sync
    restart: unless-stopped

    volumes:
      - ${DOCKER_STORAGE}/resilio-sync/config:/config
      - ${DOCKER_STORAGE}/resilio-sync/downloads:/downloads
      - ${SYNC_DATA_DIR}:/sync

    ports:
      - 55555:55555

    environment:
      - PUID=${PUID}
      - PGID=${PGID}

    networks:
      - traefik_proxy

    labels:
      - "traefik.enable=true"
    
      ## HTTP Routers
      - "traefik.http.routers.sync.entryPoints=https"
      - "traefik.http.routers.sync.rule=Host(`sync.$DOMAINNAME`)"
      - "traefik.http.routers.sync.tls=true"
    
      ## HTTP Services
      - "traefik.http.routers.sync.service=sync"
      - "traefik.http.services.sync.loadbalancer.server.port=8888"
    
      ## Middlewares
      - "traefik.http.routers.sync.middlewares=chain-auth@file"



# --- GAME SERVERS --- #
  papermc:
    image: marctv/minecraft-papermc-server:1.15
    container_name: papermc
    stdin_open: true
    tty: true
    restart: unless-stopped

    networks:
      - default

    ports:
      - 25565:25565

    volumes:
      - ${DOCKER_STORAGE}/papermc:/data

    environment:
      - PUID=${PUID}
      - PGID=${PGID}


# --- END OF SERVICES --- #

networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge

# --- END OF NETWORKS --- #
